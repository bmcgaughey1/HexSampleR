, perturbMultiplier = 0.5
)
ggplot(WASnoCo) +
ggtitle("Example 2 -- Simple Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex2.shp", delete_layer = TRUE)
# end of Example 2
#Example 3
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = FALSE
)
ggplot(WASnoCo) +
ggtitle("Example 3 -- Hexagonal Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex3.shp", delete_layer = TRUE)
# end of Example 3
#Example 4
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = TRUE
, perturbMultiplier = 0.25
)
ggplot(WASnoCo) +
ggtitle("Example 4 -- Hexagonal Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex4.shp", delete_layer = TRUE)
# end of Example 4
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = FALSE
)
ggplot(WASnoCo) +
ggtitle("Example 1 -- Simple Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_polys, colour = "yellow", fill = "pink", alpha = 0.25) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex1.shp", delete_layer = TRUE)
# end of Example 1
#Example 2
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = TRUE
, perturbMultiplier = 0.5
)
ggplot(WASnoCo) +
ggtitle("Example 2 -- Simple Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex2.shp", delete_layer = TRUE)
# end of Example 2
#Example 3
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = FALSE
)
ggplot(WASnoCo) +
ggtitle("Example 3 -- Hexagonal Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex3.shp", delete_layer = TRUE)
# end of Example 3
#Example 4
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = TRUE
, perturbMultiplier = 0.25
)
ggplot(WASnoCo) +
ggtitle("Example 4 -- Hexagonal Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex4.shp", delete_layer = TRUE)
# end of Example 4
#Example 5
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = TRUE
, perturbMultiplier = 0.25
, count = 0.1
)
ggplot(WASnoCo) +
ggtitle("Example 5 -- Hexagonal Grid of Sample Points (10% sample) With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex5.shp", delete_layer = TRUE)
# end of Example 5
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, perturb = TRUE
, perturbMultiplier = 0.25
)
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
document()
library(tigris)
library(sf)
library(raster)
library(ggplot2)
library(HexSampleR)
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
usethis::use_data_raw()
library(tigris)
WA <- counties("Washington", cb = TRUE)
WASnoCo <- subset(WA, COUNTYFP == "061")
# reproject into UTM zone 10...generatePolygonSamplePoints() won't work with data in LAT-LON
WASnoCo <- st_transform(WASnoCo, crs = 26910)
# compute area in hectares and acres
WASnoCo$HECTARES <- (WASnoCo$ALAND + WASnoCo$AWATER) / 10000
WASnoCo$ACRES <- (WASnoCo$ALAND + WASnoCo$AWATER) * 0.000247105
# drop some fields...values too large for shapefile format
WASnoCo <- WASnoCo[c(1:2, 6, 11, 12)]
usethis::use_data(WASnoCo, overwrite = TRUE)
data(package = "HexSampleR")
t <- WASnoCo
setwd(g:/R_Stuff/HesSampleR)
setwd("g:/R_Stuff/HexSampleR")
document()
library(devtools)
document()
install()
library(HexSampleR)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(sf)
library(raster)
library(ggplot2)
library(HexSampleR)
WASnoCo <- WASnoCo
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
ggplot(WASnoCo) +
ggtitle("Example 1 -- Simple Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_polys, colour = "yellow", fill = "pink", alpha = 0.25) +
geom_sf(data = sample_pts, colour = "black", size = 2)
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
ggplot(WASnoCo) +
ggtitle("Example 1 -- Simple Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex1.shp", delete_layer = TRUE)
# end of Example 1
#Example 2
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
, perturb = TRUE
, perturbMultiplier = 0.5
)
ggplot(WASnoCo) +
ggtitle("Example 2 -- Simple Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex2.shp", delete_layer = TRUE)
# end of Example 2
#Example 3
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
ggplot(WASnoCo) +
ggtitle("Example 3 -- Hexagonal Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex3.shp", delete_layer = TRUE)
# end of Example 3
#Example 4
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
, perturb = TRUE
, perturbMultiplier = 0.25
)
ggplot(WASnoCo) +
ggtitle("Example 4 -- Hexagonal Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex4.shp", delete_layer = TRUE)
# end of Example 4
#Example 5
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
, perturb = TRUE
, perturbMultiplier = 0.25
, count = 0.1
)
ggplot(WASnoCo) +
ggtitle("Example 5 -- Hexagonal Grid of Sample Points (10% sample) With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
st_write(sample_pts, "WA_SNOCO_points_Ex5.shp", delete_layer = TRUE)
# end of Example 5
projections(WASnoCo)
projection(WASnoCo)
projInfo("units")
# test code for USGSlidar package
#options("rgdal_show_exportToProj4_warnings"="none")
library(rgdal)
projInfo("units")
crs(WASnoCo)
grep("units", crs(WASnoCo))
t <- crs(WASnoCo)
str_split(t, " units=")
library(tidyverse)
str_split(t, " units=")
str_split(t, " +units=")
str_split(t, "+units=")
str_split(t, " +units=")
?str_split
str_split(t, "\t+units=")
str_split(t, "=")
str_split(t, " ")
st <- str_split(t, " ")
st[[4]]
st[4]
st[[1]][4]
grepl("+units=", t)
grep("+units=", t, value = TRUE)
grep("+units=", st, value = TRUE)
grepl("+units=", st, value = TRUE)
grepl("+units=", st)
?grep
grepl("+units=", st, value = TRUE, fixed = TRUE)
grep("+units=", st, value = TRUE)
grep("+units=", t, value = TRUE)
grep("+units=", t, value = TRUE, fixed = TRUE)
?WASnoCo
document()
library(tigris)
library(sf)
library(raster)
WA <- counties("Washington", cb = TRUE)
WASnoCo <- subset(WA, COUNTYFP == "061")
# reproject into UTM zone 10...generatePolygonSamplePoints() won't work with data in LAT-LON
#WASnoCo <- st_transform(WASnoCo, crs = 26910)
# compute area in hectares and acres
WASnoCo$HECTARES <- (WASnoCo$ALAND + WASnoCo$AWATER) / 10000
WASnoCo$ACRES <- (WASnoCo$ALAND + WASnoCo$AWATER) * 0.000247105
# drop some fields...values too large for shapefile format
WASnoCo <- WASnoCo[c(1:2, 6, 11, 12)]
usethis::use_data(WASnoCo, overwrite = TRUE)
?st_write
knitr::opts_chunk$set(message = FALSE)
library(sf)
library(raster)
library(ggplot2)
library(HexSampleR)
knitr::opts_chunk$set(message = FALSE)
library(sf)
library(raster)
library(ggplot2)
library(HexSampleR)
?st_voronoi
library(sf)
library(raster)
library(ggplot2)
library(HexSampleR)
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
library(sf)
library(raster)
library(ggplot2)
library(HexSampleR)
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
WASnoCo <- WASnoCo
# reproject into UTM zone 10...generatePolygonSamplePoints() won't work with data in LAT-LON
WASnoCo <- st_transform(WASnoCo, crs = 26910)
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
#st_write(sample_pts, "WA_SNOCO_points_Ex1.shp", delete_layer = TRUE, quiet = TRUE)
tpolys <- st_voronoi(sample_pts, bOnlyEdges = TRUE)
library(mapview)
mapview(tpolys)
mapview(sample_pts)
tpolys <- st_voronoi(sample_pts, envelope = WASnoCo, bOnlyEdges = TRUE)
tpolys <- st_collection_extract(st_voronoi(do.call(c, st_geometry(sample_pts))))
# match them to points:
sample_pts$tpolys = tpolys[unlist(st_intersects(sample_pts, tpolys))]
crs(sample_pts)
crs(tpolys)
View(tpolys)
head(sample_pts)
head(WASnoCo)
tpolys <- st_voronoi(st_union(sample_pts), envelope = WASnoCo, bOnlyEdges = TRUE)
head(st_union(sample_pts))
tpolys <- st_voronoi(st_union(sample_pts))
mapview(tpolys)
plot(tpolys)
tpolys <- st_voronoi(sample_pts)
plot(tpolys)
# Example 1
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
#st_write(sample_pts, "WA_SNOCO_points_Ex1.shp", delete_layer = TRUE, quiet = TRUE)
ggplot(WASnoCo) +
ggtitle("Example 1 -- Simple Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
#Example 2
pattern <- "regular"
cellsize <- computeCellSize(6400, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
, perturb = TRUE
, perturbMultiplier = 0.5
)
#st_write(sample_pts, "WA_SNOCO_points_Ex2.shp", delete_layer = TRUE, quiet = TRUE)
ggplot(WASnoCo) +
ggtitle("Example 2 -- Simple Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
#Example 3
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
)
#st_write(sample_pts, "WA_SNOCO_points_Ex3.shp", delete_layer = TRUE, quiet = TRUE)
ggplot(WASnoCo) +
ggtitle("Example 3 -- Hexagonal Grid of Sample Points") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
#Example 4
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
, perturb = TRUE
, perturbMultiplier = 0.25
)
#st_write(sample_pts, "WA_SNOCO_points_Ex4.shp", delete_layer = TRUE, quiet = TRUE)
ggplot(WASnoCo) +
ggtitle("Example 4 -- Hexagonal Grid of Sample Points With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
#Example 5
pattern <- "hexagonal"
cellsize <- computeCellSize(6000, aunits = "acre", pattern = pattern) / 3.2808
sample_pts <- generatePolygonSamplePoints(WASnoCo
, polyBuffer = cellsize / 2
, pattern = pattern
, gridSpacing = cellsize
, IDColumnLabel = "NAME"
, perturb = TRUE
, perturbMultiplier = 0.25
, count = 0.1
)
#st_write(sample_pts, "WA_SNOCO_points_Ex5.shp", delete_layer = TRUE, quiet = TRUE)
ggplot(WASnoCo) +
ggtitle("Example 5 -- Hexagonal Grid of Sample Points (10% sample) With Random Offset") +
geom_sf(aes(fill = COUNTYFP), show.legend = FALSE) +
geom_sf(data = sample_pts, colour = "black", size = 2)
install()
browseVignettes("HexSampleR")
library(devtools)
getwd()
setwd("G:/R_Stuff/HexSampleR")
devtools::install()
browseVignettes()
install.packages("~/HexSampleR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
browseVignettes()
devtools::install()
devtools::install(..., build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
browseVignettes()
# check for vignette
browseVignettes("HexSampleR")
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
usethis::use_readme_rmd()
setwd("G:R_Stuff/HexSampleR")
setwd("G:/R_Stuff/HexSampleR")
usethis::use_readme_rmd()
# rebuild readme.md
devtools::build_readme()
devtools::install_github("bmcgaughey1/HexSampleR")
devtools::install_github("bmcgaughey1/HexSampleR")
# build vignettes and copy them to inst/doc in project
# this should make them available when installing from github
devtools::buildVignettes(dir = ".", tangle=TRUE)
# build vignettes and copy them to inst/doc in project
# this should make them available when installing from github
tools::buildVignettes(dir = ".", tangle=TRUE)
getwd()
dir.create("inst/doc")
dir.create("inst")
dir.create("inst/doc")
file.copy(dir("vignettes", full.names=TRUE), "inst/doc", overwrite=TRUE)
browseV("HexSampleR")
browseVignettes("HexSampleR")
devtools::install_github("bmcgaughey1/HexSampleR", build_vignettes = TRUE)
devtools::install_github("bmcgaughey1/HexSampleR", build_vignettes = TRUE)
